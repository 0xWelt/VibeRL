[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "snake-game"
version = "0.1.0"
description = "A Snake game with Gymnasium interface for human play and AI training"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "snake-game", email = "snake@example.com"},
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Education",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Topic :: Games/Entertainment",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
keywords = ["snake", "game", "gymnasium", "reinforcement-learning", "pygame"]
requires-python = ">=3.12"
dependencies = [
    "gymnasium>=0.28.0",
    "numpy>=1.26.0",
    "pygame>=2.5.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "ruff>=0.12.0",
]
examples = [
    "matplotlib>=3.8.0",
    "jupyter>=1.0.0",
]

[project.urls]
Homepage = "https://github.com/snake-game/snake-game"
Repository = "https://github.com/snake-game/snake-game"
Documentation = "https://github.com/snake-game/snake-game#readme"
"Bug Tracker" = "https://github.com/snake-game/snake-game/issues"

[project.scripts]
snake-game = "snake_game.cli:main"
snake-human = "snake_game.cli:human_mode"
snake-ai = "snake_game.cli:ai_mode"

[tool.hatch.build.targets.wheel]
packages = ["src/snake_game"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/README.md",
    "/LICENSE",
]

# Linter tools #################################################################

[tool.codespell]
ignore-words = "docs/spelling_wordlist.txt"

[tool.ruff]
target-version = "py312"
line-length = 100
output-format = "full"
src = ["snake_game", "examples"]

[tool.ruff.format]
quote-style = "single"
docstring-code-format = false
skip-magic-trailing-comma = false

[tool.ruff.lint]
select = [
    "E", "W",  # pycodestyle
    "F",       # pyflakes
    "I",       # isort
    "N",       # pep8-naming
    "UP",      # pyupgrade
    "ANN",     # flake8-annotations
    "S",       # flake8-bandit
    "BLE",     # flake8-blind-except
    "B",       # flake8-bugbear
    "COM",     # flake8-commas
    "C4",      # flake8-comprehensions
    "EXE",     # flake8-executable
    "FA",      # flake8-future-annotations
    "ISC",     # flake8-implicit-str-concat
    "LOG",     # flake8-logging
    "PIE",     # flake8-pie
    "PYI",     # flake8-pyi
    "Q",       # flake8-quotes
    "RSE",     # flake8-raise
    "SIM",     # flake8-simplify
    "TID",     # flake8-tidy-imports
    "TC",      # flake8-type-checking
    "PERF",    # perflint
    "FURB",    # refurb
    "TRY",     # tryceratops
    "RUF",     # ruff
    "ASYNC",   # flake8-async
]
ignore = [
    # E501: line too long
    # W505: doc line too long
    # too long docstring due to long example blocks
    "E501",
    "W505",
    "ANN002",
    "ANN003",
    "ANN204", # return type for special methods
    # ANN401: dynamically typed expressions (typing.Any) are disallowed
    "ANN401",
    "B027",  # empty method https://github.com/PyCQA/flake8-bugbear/issues/301
    "C416",  # unnecessary comprehensions
    "COM812",  # conflict with formatter
    "RUF005",
    # S101: use of `assert` detected
    # internal use and may never raise at runtime
    "S101",
    "S105",   # hardcoded password string
    "S107",   # hardcoded password default
    "S110",   # try-except-pass in tests - acceptable for test code
    # S311: random number generator not cryptographically secure
    # not a security-sensitive application
    "S301",  # pickle
    "S311",
    # SIM105: use `contextlib.suppress(...)` instead of try-except-pass
    # reduce unnecessary function call
    "SIM105",
    "TID252", # relative imports
    # TRY003: avoid specifying long messages outside the exception class
    # long messages are necessary for clarity
    "TRY003",
    "TRY400",
    "N802",   # naming
]
typing-modules = ["snake_game.typing"]
unfixable = ["S110"]
allowed-confusables = ["，", "。", "：", "？", "！", "、", "（", "）", "；", "“", "”"]
extend-safe-fixes = [
    "C408",
    "E711",
    "FURB129",
    "PERF102",
    "PIE810",
    "SIM102",
    "TC001",  # typing-only-first-party-import
    "TC002",  # typing-only-third-party-import
    "TC003",  # typing-only-standard-library-import
    "TC004",  # runtime-import-in-type-checking-block
    "TRY201",
    "UP004",  # useless-object-inheritance
    "UP008",  # super-call-with-parameters
    "UP038",  # non-pep604-isinstance
    "UP039",  # unnecessary-class-parentheses
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = [
    "F401",    # unused-import
]
"examples/**/*.py" = [
    "TID252",  # relative-imports
]

"test/**/*.py" = [
    "ANN",
    "S108",
]

[tool.ruff.lint.isort]
known-first-party = ["snake_game"]
known-local-folder = ["snake_game", "examples", "tests"]
lines-after-imports = 2

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true
suppress-dummy-args = true
suppress-none-returning = true


[tool.ruff.lint.flake8-type-checking]
runtime-evaluated-base-classes = ["pydantic.BaseModel"]
runtime-evaluated-decorators = ["pydantic.validate_call"]

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"
multiline-quotes = "double"
inline-quotes = "single"

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"
