[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "snake-game"
version = "0.1.0"
description = "A Snake game with Gymnasium interface for human play and AI training"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "snake-game", email = "snake@example.com"},
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Education",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Games/Entertainment",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
keywords = ["snake", "game", "gymnasium", "reinforcement-learning", "pygame"]
requires-python = ">=3.8.1"
dependencies = [
    "gymnasium>=0.28.0",
    "numpy>=1.21.0",
    "pygame>=2.1.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "ruff>=0.12.0",
]
examples = [
    "matplotlib>=3.5.0",
    "jupyter>=1.0.0",
]

[project.urls]
Homepage = "https://github.com/snake-game/snake-game"
Repository = "https://github.com/snake-game/snake-game"
Documentation = "https://github.com/snake-game/snake-game#readme"
"Bug Tracker" = "https://github.com/snake-game/snake-game/issues"

[project.scripts]
snake-game = "snake_game.cli:main"
snake-human = "snake_game.cli:human_mode"
snake-ai = "snake_game.cli:ai_mode"

[tool.hatch.build.targets.wheel]
packages = ["src/snake_game"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/README.md",
    "/LICENSE",
]

[tool.ruff]
# Enable pycodestyle (`E`) and Pyflakes (`F`) codes by default plus import sorting.
select = ["E", "F", "W", "C90", "I", "N", "UP", "YTT", "S", "BLE", "B", "A", "COM", "C4", "DTZ", "T10", "EM", "EXE", "FA", "ISC", "ICN", "G", "INP", "PIE", "T20", "PYI", "PT", "Q", "RSE", "RET", "SLF", "SLOT", "SIM", "TID", "TCH", "ARG", "PTH", "ERA", "PD", "PGH", "PL", "TRY", "NPY", "RUF"]
ignore = ["E501", "COM812", "ISC001", "T201"]

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

# Same as Black.
line-length = 88

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$$"

# Assume Python 3.8
target-version = "py38"

[tool.ruff.lint]
# Enable pycodestyle (`E`) and Pyflakes (`F`) codes by default plus import sorting.
select = ["E", "F", "W", "C90", "I", "N", "UP", "YTT", "S", "BLE", "B", "A", "COM", "C4", "DTZ", "T10", "EM", "EXE", "FA", "ISC", "ICN", "G", "INP", "PIE", "T20", "PYI", "PT", "Q", "RSE", "RET", "SLF", "SLOT", "SIM", "TID", "TCH", "ARG", "PTH", "ERA", "PD", "PGH", "PL", "TRY", "NPY", "RUF"]
ignore = ["E501", "COM812", "ISC001", "T201"]

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$$"

[tool.ruff.lint.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "PLR2004", "PLR0913", "PLR0917"]

[tool.ruff.lint.isort]
# Use a single line after imports.
lines-after-imports = 2
# Use a single line between import sections.
lines-between-types = 1
# Use a consistent ordering for imports.
order-by-type = true
# Group imports by type (standard library, third-party, first-party).
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=snake_game",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
